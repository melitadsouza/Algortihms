fprintf('*******Input for Erdos Renyi********');
n = input('Enter number of nodes: ');
p  = input('Enter probability: ');
deg = input('Initial node degree of for regular graph (use 1 or even numbers): ');

er_renyi = erdosRenyi(n, p, deg);
random_matrix = randint(n, n, [1 10]);
m = times(er_renyi, random_matrix);

tic; %Start timer
tt=1;
while(tt>=1)
    if tt~=1
        fprintf('\n If you Want to Change your path Value Matrix than Enter 1 otherwise 0 \n');
        checkk = input('');
    if checkk == 1
        fprintf('\nNow you have changed your Path Value Matrix \n');
        m = randi([1,10],tn); %nowgive any random value to change path
        matrix
    for i=1:n
        m(i,i)=0;
    end
    elseif checkk==0
        break;
    end
end
tt=tt+1;
k=1;

for i=1:n
 for j=1:n
 if m(i,j) ~= 0 % if edge not exit than skip that path
 edge(k,1) = i ;
 edge(k,2) = j;
 k=k+1;
 end
 end

end
% first we initilize that shortest of all node is infinity i.e. 999 except 1
%for that value is zero
d(1)=0;
for i=2:tn
 d(i)=999;
end

% now we run loop and using Bellman -Ford method
% now we do relaxtation for each Edge
% total no of Edges are = k-1
for i=1:tn
for j=1:k -1 % run loop for each path
 if (d(edge(j,2)) > d(edge(j,1))+m(edge(j,1),(edge(j,2)))) % if earlier value is greater than change it

 d(edge(j,2)) = d(edge(j,1))+m(edge(j,1),(edge(j,2)));
 lastlabel(edge(j,2)) =edge(j,1);

 end
end
end
% printing shortest path
fprintf(' \n Shortest path values are from Node 1 ( Origin) \n Label(Destination) = [Total path value, Predecessor Node]\n')
for i=1:tn
 fprintf(' Vertex( %d ) = [ %d , %d ] \n ',i,lastlabel(i),d(i));
end
toc; %Stop timer
fprintf('\n You are running your Code %d time \n',tt-1);
end 
